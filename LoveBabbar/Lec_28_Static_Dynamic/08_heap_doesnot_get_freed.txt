‚úÖ Stack:

   The stack follows a strict LIFO (Last In, First Out) structure.
   When a function or block begins, its local variables (like int i) are pushed onto the stack.
   When the block ends (e.g., end of a loop iteration or function return), the stack automatically "pops" and frees that memory.
   This is fast and managed by the CPU and compiler ‚Äî no manual cleanup needed.

‚ö†Ô∏è Heap: 

   The heap is a large pool of memory used for dynamic allocation (via new, malloc, etc.).
   It does not follow any automatic structure ‚Äî the programmer must manually free it using delete or free.
   If you don‚Äôt, the memory stays allocated ‚Äî this is called a memory leak.

üß† Underlying Concept:

Stack: Managed by the call stack, cleaned up by compiler/runtime.

Heap: Managed by the OS and memory allocator, must be manually cleaned up.